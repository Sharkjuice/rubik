# -*- coding: utf-8 -*-  
import pygame,copy,math,os
from cubeGlobal import background,green,black,red,colors
from cubeCommon import button
from cubePanel import Panel
import cube3D,cubeModel,cubeLegend

#显示魔方区域的高度和宽度
height = 500
width = 500
#3D显示参数
fov = 700
distance = 12
adj_x = 830
adj_y = 50

s_map = {0:u"自定义题库",1:u"十字底题库",2:u"F2L题库",3:u"OLL题库",4:u"PLL题库"}

class CubeLibrary:
    def __init__(self,cube,init_level=0):
        self.total =  0
        self.total_page = 0
        self.current = -1
        self.current_page = -1
        self.next_index = 0
        self.snapshots = []
        self.lib_level = init_level
        self.my_cube_3d = None
        self.snapshots_dir = ".\\snapshots_0\\"
        self.legends = []
        self.current_legend = -1
        self.build()
        
    def build(self):    
        self.snapshots = [] 
        try:
            with open(self.snapshots_dir + "index", "r",1) as fo:
                for line in fo.readlines():
                    b = line.strip("(\n)").split(" ")
                    if b[0] != "" and b[0][0] != "#":
                        self.snapshots.append((b[0],int(b[1])))
        except IOError as err: 
            os.mkdir(self.snapshots_dir)        
            fo = open(self.snapshots_dir + "index", "w", 1)
            fo.write("#generated by this program, never modify it.\n")
            fo.close()   
        if len(self.snapshots) > 0:
            self.setTotal(len(self.snapshots))
            self.setCurrent(1)      
            last = self.snapshots[-1][0]
            last_index = int(last[7:-4])
            self.next_index = last_index
        else:
            self.total =  0
            self.total_page = 0
            self.current = -1
            self.current_page = -1
            self.next_index = 0

    def saveCube(self,cube,flag,figure=0):
        if figure != 0:#此图案已经存在，就不保存了。
            if figure in [item[1] for item in self.snapshots]:
                Panel.printLeft(u"已经有相同的魔方存在，不能保存")
                return
        if flag == 0:#临时存放，为了调用规则引擎
            fo = open(".\\mycube.clp", "w", 1)
        else:
            if figure == 0:
                self.setLevel(0)
            self.next_index += 1
            new_sn = "mycube_" + str(self.next_index) + ".clp"
            fs = open(self.snapshots_dir +"index", "a", 1)
            new_item = new_sn + " " + str(figure)
            fs.write(new_item + "\n")
            fs.close()
            self.setTotal(self.total + 1)
            self.snapshots.append((new_sn,figure))
            fo = open(self.snapshots_dir + "mycube_" + str(self.next_index) + ".clp", "w", 1)
            self.takeSnapshot(cube)
            self.setCurrent(self.getTotal())
            Panel.printLeft(u"保存为第" + str(self.total) + "份快照")
            
        fo.write("(defrule start-up =>\n")
        for block in cube.blocks:
            block_str = "(assert (blk %d %d %d %c %c %c))\n" % (block.current.x, block.current.y, block.current.z,
              block.colors[0],block.colors[1],block.colors[2])
            fo.write(block_str)
        fo.write("\n(assert (phase 0)))")
        fo.close()
        return

    def deleteSnapshot(self):  
        if self.lib_level > 0:
            Panel.printLeft(u"不能删除非自定义题库里的题目")
            return     
        if self.total == 0 or self.current == 0:
            return
        os.remove(self.snapshots_dir +  self.snapshots[self.current-1][0])
        del(self.snapshots[self.current-1])
        with open(self.snapshots_dir + "index", "w", 1) as fo:
            fo.write("#generated by this program, never modify it.\n")
            for line in self.snapshots:
                fo.write(line[0] + " " + str(line[1]) + "\n")
        self.setTotal(self.total - 1)
        if self.current > 0:
            self.setCurrent(self.current - 1)
        if self.current == 0:
            self.setCurrent(self.current + 1)
        self.selectSnapshot(self.current)
        
    def showLibBelowLevel3(self,b=None):        
        if self.total == 0:
            return      
        if b != None:#default select current， which is default to 0
            self.setCurrent(b)
        file = self.snapshots_dir + self.snapshots[self.current-1][0]
        cube = cubeModel.Cube(file)              
        self.my_cube_3d = cube3D.Cube3D(cube,width, 
                   height, fov, distance, adj_x, adj_y)
        self.my_cube_3d.buildFaces()
        self.my_cube_3d.lbdLayerPos([(180,-70),(480, -70),  
                                                (160, 260)])    
        self.displayCube()
        Panel.printLeft(u"选择了第" + str(self.current) + "份快照")

    def showLibAboveLevel3(self,b=None): 
        Panel.clearRight()  
        if self.total == 0:
            return
        if b != None:#default select current， which is default to 0
            self.setCurrent(b)
        start = (self.current-1)*15
        end = start + 15
        if end > len(self.snapshots):
            end = len(self.snapshots)
        self.legends = []
        for i in range(start,end):
            file_no =  + i
            file = self.snapshots_dir + self.snapshots[i][0]
            cube = cubeModel.Cube(file)   
            m,r = divmod(i-start,3)           
            cube_3d = cubeLegend.CubeLegend(cube,width, 
                   height, fov, 20, 650+r*180, -100+m*115)
            cube_3d.buildFaces()
            cube_3d.lbdLayerPos([(180,-70),(480, -70),(160, 260)])   
            cube_3d.displayCube()
            self.legends.append(cube_3d)            

    def showLib(self,b=None):
        if self.lib_level < 3:
            self.showLibBelowLevel3(b)
        else:
            self.showLibAboveLevel3(b)
        
        
    def setCurrent(self,c):
        if self.total == 0:
            return      
        self.current = c
        m,r = divmod(c,10)
        if (m + r) != 0:
            if r == 0:
                self.current_page = m
            else:
                self.current_page = m + 1        
        
    
    def setTotal(self,t):        
        if self.lib_level < 3:
            m,r = divmod(t,10)
            self.total = t
            if (m + r) != 0:
                if r == 0:
                    self.total_page = m
                else:
                    self.total_page = m + 1
        else:
            self.total_page = 1
            m,r = divmod(t,16)
            self.total = m + 1
        
    def getTotal(self):        
        return self.total 
        
    def nextPage(self,flag):
        if self.current_page < self.total_page:
            self.current_page += 1
    def prevPage(self,flag):
        if self.current_page > 0:
            self.current_page -= 1
            
    def displayHeader(self):
        screen,ft_sz,x_scale,y_scale= Panel.screen, \
             Panel.ft_sz,Panel.x_scale,Panel.y_scale
        b_x = x_scale*820
        b_y = y_scale*10
        b_h = y_scale*30
        if self.total_page == 0:
            start = 0
            stop1 = 0
            stop2 = 10        
        else:
            start = (self.current_page -1)*10
            stop1 = start + 10
            stop2 = stop1        
            if self.current_page == self.total_page:
                stop1 = self.total
        if self.current_page == 1:
            button(screen, "<<", ft_sz, b_x, b_y, x_scale*30,
                                b_h, Panel.gray, red,None,-1)
        else:
            button(screen, "<<", ft_sz, b_x, b_y, x_scale*30,
                              b_h,green,red,self.prevPage,-1)
        b_x += x_scale*40

        for b in range(start,stop1):
            if (b + 1) == self.current:     
                button(screen, str(b+1), ft_sz, b_x, b_y, 
                       x_scale*30,b_h,red,red,self.showLib,b+1)
            else:
                button(screen, str(b+1), ft_sz, b_x, b_y,
                       x_scale*30,b_h,green,red,self.showLib,b+1)
            b_x += x_scale*40
        for b in range(stop1, stop2):
            button(screen, "", ft_sz, b_x, b_y, x_scale*30,
                   b_h,Panel.gray,red,None,b+1)
            b_x += x_scale*40
        if self.current_page == self.total_page:
            button(screen, ">>", ft_sz, b_x, b_y, x_scale*30,
                   b_h,Panel.gray,red,None,1)
        else:
            button(screen, ">>", ft_sz, b_x, b_y, x_scale*30,
                   b_h,green,red,self.nextPage,1)

        #显示控制按钮
        b_map = [("自定",self.level,0),("十字",self.level,1),("F2L",self.level,2),
                    ("OLL",self.level,3),(u"PLL",self.level,4)]

        b_x = x_scale*820
        b_y = y_scale*640
        b_h = y_scale*30
        for b in b_map:
            button(screen, b[0], ft_sz, b_x, b_y, x_scale*60,b_h,green,red,b[1],b[2])
            b_x += x_scale*70
        Panel.printRight(s_map[self.lib_level])
       
    def displayCube(self):   
        self.my_cube_3d.displayCube()

    def level(self,value):
        self.setLevel(value)
        self.showLib()
        
    def setLevel(self,value):
        self.lib_level = value
        self.snapshots_dir = ".\\snapshots_" + str(value) + "\\"
        self.build()
        Panel.clearRight()
        Panel.printRight(s_map[self.lib_level])

    def cube(self):
        return self.my_cube_3d.cube 

    def blocks(self):
        return self.my_cube_3d.blocks
        
    def hitBlock(self,x,y):
        count = len(self.legends)
        for i in range(count):
            l = self.legends[i]
            if l.hitMe(x,y):
                if self.current_legend != -1:
                    self.my_cube_3d.redraw()
                Panel.printLeft(u"选择了第%d份快照"%(i+1))
                self.current_legend = i
                self.my_cube_3d = l
                break
        
    